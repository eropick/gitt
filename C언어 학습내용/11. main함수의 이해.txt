모든 C언어 프로그램은 main함수부터 수행한다.
c프로그램의 실행은 운영체제 위에서 수행하며 운영체제로부터 값을 가지고 와 
실행하는데 이용할 수 있다. 실행을 하면서 프로그램에 특정한 값을 넘겨줄 수 있다.
이 통로가 바로 스트링 형태 변수인 char* argv[] 이다.

실제로 다음의 프로그램을 실행해봐라
#include<stdio.h>
int main(int argc, char *argv[])
{
	//운영체제에서 가져오는 명령어들의 스트링이 어떻게 전달되는지
	int i;
	printf("argc: %d \n", argc); //argc의 값을 표기해보자
	for (i = 0; i < argc; ++i) {
		printf("argv[%d] : %s \n", i, argv[i]);
	}
	//To do here
	return 0;
}

이 코드를 실행하면 스트링으로 이 프로그램이 있는 위치를 표기한다.
매번 코드실행마다 

경로.exe(프로세스)종료되었습니다. 라고 뜨는 그 경로가 출력된다.

실행 - cmd 명령프롬프트 창에 
cd  C:\Users\KGT\Desktop\C언어\C학습결과\main함수\x64\Debug\

경로로 이동해서 프로그램명을 입력하고
다음과 같이 스트링을 추가로 공백 단위로 입력하면 
main함수.exe 123 hello

argc : 3 //총 입력한 명령어 즉, 스트링 개수
argv[0]: main함수.exe //실행한 프로그램의 경로를 포함한 명칭
argv[1]: 이 다음 공백으로 끊어진 스트링인 123
argv[2]: 이 다음인 hello가 된다

argc는 입력한 스트링의 개수
argv는 공백단위로 끊어서 명령어로 입력한 스트링을 출력하는 것을 볼 수 있다.

이처럼 argc는 명령어 입력라인의 공백으로 구분된 스트링의 갯수를 의미하며
argv는 명령어를 스트링 상태로 저장한다는 것을 알 수 있다. 
숫자를 입력하더라도 항상 스트링 형태로 할당됨을 알고있어야 한다.

#include<stdio.h>
#include<stdlib.h>
int main(int argc, char *argv[])
{
	//운영체제에서 가져오는 명령어들의 스트링이 어떻게 전달되는지
	int i=0,num1,num2;
	//argv[0]은 항상 경로에 있는 프로그램 이름이기 때문에 빼버린다.
	num1 = atoi(argv[++i]); //입력받은 명령어를 넘버1에 할당
	num2 = atoi(argv[++i]); //입력받은 명령어를 넘버2에 할당
	printf("%d + %d = %d", num1, num2, num1 + num2);
	//To do here
	return 0;
}
이 프로그램은 직접 컴파일 후 실행하면 에러가 뜨지만
터미널에서 직접 입력한다면 에러가 나지 않는다.