포인터에 대해 총정리

1.1 일반변수, 1차원 배열의 주소를 담을 때 -> 일반 포인터 * 1개만 사용.
int* pa; 
int a =100;
int b[3] = {1,2,3};
pa = &a; //변수의 주소 할당시
pa = b //배열의 이름은 배열 첫 요소의 주소
pa = &b[0] //배열 첫 요소의 주소

---------------------------------------------------
1.2 문자열을 포인터 형태로 선언할 때
char s[] = "hello"; or char* s = "hello"
char ps* = s; //s배열의 첫 주소가 저장됨. 

---------------------------------------------------
1.3 역참조

pa -> 일반 주소값
*pa -> 그 주소에 해당하는 int값(역참조)
s -> 일반 주소값이지만, %s 스트링으로 받을 경우 정상 문자열 출력
*s -> 그 주소에 해당하는 char값(역참조)

---------------------------------------------------
2.1 2차원 배열의 주소를 담을 때

아래글 요약
2차원배열을 담는 포인터: 형식 (*변수명)[가로크기];
단순 포인터 배열 형식* 변수명[배열크기];

우선 생각해 볼 것은 우리가 알고 있는 이중포인터가 있는데
1차원배열의 주소를 그냥 포인터에 담았다면 이중포인터에
2차원배열을 담을 수 있지 않을까이다.
정답은 자료형이 다르다며 에러가 난다.

왜냐하면 이중 포인터와 배열 포인터는 개념이 다르기 때문이다.
이중포인터는 포인터 변수의 주소를 담는 포인터라고 봐야한다,

int* (*y);  
그렇기 때문에 ex)int* x; 와 같은 포인터 변수의 주소 &x를 할당받는다.  

1차원 배열의 경우는 단순한 변수의 주소를 담는 단일포인터에 담을 수 있지만 

2차원 배열(행,열)의 주소는 배열 포인터에 할당해야한다.
(*)[열] 의 형태가 배열 포인터이다.
2차원 배열 포인터는 열을 가리킨다.

그렇다면 3차원 배열(면,행,열) 포인터는 
(*)[행][열] => 행과 열을 가리킨다.

따라서
int a[2][3];
int **ps = a; 는 성립하지 않는다.

배열의 이름은 배열의 첫 요소의 주소이다. 
그렇지만 2차원 배열 a의 타입은 int* [ ]; 타입이다.
따라서 다음과 같이 선언해준다.

int a[2][3] = { {1,2,3}, {4,5,6} };   //int a[세로][가로];
int (*pa)[3]; //형식 (*변수이름)[가로크기];
pa = a; //다음의 값이 성립한다.

pa를 출력해보면 a의 첫 요소의 주소인 a[0]의 주소를 갖고있으며 (pa == &a[0])
*pa로 역참조 할 경우 a[0][0]의 주소를 알 수 있고 (*pa == &a[0][0])
**pa로 두 번 역참조 할 경우 a[0][0]의 값임을 알 수 있다. (**pa == a[0][0])
또한 직접 출력해보면 &a[0] == &a[0][0]이 같음을 알 수 있다.

-> 배열이름 a는 a[0]의 주소 a[0]는 a[0][0]의 주소다.

즉, a라는 것은 a[0]주소를 가르키고 있으며 
a[0]라는 것은 a[0][0]라는 것을 가리키고 있는 포인터라고 할 수 있다.

a의 주소를 할당받은 포인터를 ++시킬 경우 어떻게 증가할까?
a라는 값은 a[0]의 주소를 나타낸다고 했다. a[0]는 행을 나타내며
행이 증가하게 되는 것이므로 a[1]의 주소로 변하게 된다.
그렇다면 *pa를 증가시키면 a[0][0]주소의 값을 하나 
증가시키는 것이므로 a[0][1]이 된다.

-------------------------------------------
2.2 
2차원 배열을 1차원 포인터 배열로 나눌 수도 있다.
int* pa[2]; -> 배열은 2개이고 주소를 담는 포인터 배열 형식이다.
(포인터가 배열형식으로 만들어졌다는 의미다. 
이와 다르게 배열 포인터는 배열의 주소를 담는 포인터를 의미한다)

pa[0] = a[0]; //0번째 요소에 a[0][0]의 주소를 할당한다.
pa[1] = a[1]; //1번째 요소에 a[1][0]의 주소를 할당한다.

그냥 단순하게 크기만 2인 주소 하나만을 할당하는 배열이므로
a-> a[0] -> a[0][0] 구조의 이중 포인터 구조를 가진 a는 넣을 수 없고
a[0]와 같이 a[0][0]의 단일 주소를 나타내는 포인터만 들어갈 수 있다.
따라서 int* pa;와 같이 선언해서 pa = a[0]라고 해도 오류가 나지 않는다는 점이다.
-------------------------------------------
2.3 여러 문자열을 포인터 배열로 선언
하나의 문자열을 포인터로 선언한 것처럼 동일하게 할 수 있다.

char *s[] = {"txt","msc","cvc"};
char **ps = s; // char **ps = {"txt","msc","cvc"}; 와 같이 할 수도 있다.

단일 포인터일때는 ps를 %s로 곧바로 문자열을 확인할 수 있었고,
%c일 경우 *ps 역참조로 하나씩 주소에 해당하는 char값을 얻었다.

이중 포인터에서는 ps는 이중적인 주소를 의미하게 되므로 주소값말고는
얻을 수 없다. 따라서 *ps역참조를 통해 문자열을 출력하고 **ps 두 번
역참조를 하면 단일 포인터때와 동일하게 %c값을 얻을 수 있다.

여기서 a -> a[0] -> a[0][0]  개념이 있었는데
a는 a[0]의 주소를 의미하고 a[0]은 a[0][0]의 주소를 의미한다는 것이다.
포인터로 a를 받았다면 그 포인터를 그냥 출력했을 때는 a[0]주소가 나올 것이고
역참조(그 a[0]가 가리키는 값의 의미)했다고 한다면 a[0][0]의 주소가 나올 것이며
한 번 더 역참조(a[0][0]의 값의 의미)한다면 a[0][0]의 값을 알 수 있다. 

int a[2][3] = { {1,2,3}, {4,5,6} };  
int (*pa)[3] = a; //or &a[0]
인 경우 a[0]의 주소가 할당되고 a[0]라는 것은 a[0][0]를 가리키므로 
두 번의 역참조로 값에 접근해야 함으로 알 수 있었다.

a[0]는 행으로 열인 a[0][0]의 주소를 가리킨다. 
그렇기 때문에 열을 가리키는 2차원 배열 포인터에 할당할 수 있는 것이다.



